00000000: 2320 4f62 6a65 6374 6976 6573 0a20 200a  # Objectives.  .
00000010: 2020 2a20 436f 6d70 696c 6520 6120 4320    * Compile a C 
00000020: 7072 6f67 7261 6d20 7769 7468 2064 6562  program with deb
00000030: 7567 2073 796d 626f 6c73 2061 6e64 2061  ug symbols and a
00000040: 6c6c 2077 6172 6e69 6e67 7320 656e 6162  ll warnings enab
00000050: 6c65 640a 2020 2a20 5772 6974 6520 7369  led.  * Write si
00000060: 6d70 6c65 2043 2070 726f 6772 616d 7320  mple C programs 
00000070: 7769 7468 2069 662d 7374 6174 656d 656e  with if-statemen
00000080: 7473 2c20 7768 696c 652d 7374 6174 656d  ts, while-statem
00000090: 656e 7473 2c20 616e 6420 6d75 6c74 6970  ents, and multip
000000a0: 6c65 2066 756e 6374 696f 6e73 0a20 202a  le functions.  *
000000b0: 2057 7269 7465 2066 6f72 6d61 7474 6564   Write formatted
000000c0: 2064 6174 6120 746f 2060 7374 646f 7574   data to `stdout
000000d0: 6020 7769 7468 2060 7072 696e 7466 600a  ` with `printf`.
000000e0: 2020 2a20 5573 6520 6066 7265 6164 6020    * Use `fread` 
000000f0: 746f 2072 6561 6420 6279 7465 7320 6672  to read bytes fr
00000100: 6f6d 2061 2066 696c 650a 2020 2a20 436f  om a file.  * Co
00000110: 6e76 6572 7420 6173 6369 6920 6465 6369  nvert ascii deci
00000120: 6d61 6c20 7661 6c75 6573 2066 6f72 2063  mal values for c
00000130: 6861 7261 6374 6572 7320 746f 2061 2073  haracters to a s
00000140: 7472 696e 6720 6f66 206f 6e65 7320 616e  tring of ones an
00000150: 6420 7a65 726f 7320 7265 7072 6573 656e  d zeros represen
00000160: 7469 6e67 2069 7427 7320 6269 6e61 7279  ting it's binary
00000170: 2065 6e63 6f64 696e 670a 2020 2a20 5573   encoding.  * Us
00000180: 6520 603c 602c 2060 6361 7460 2c20 6065  e `<`, `cat`, `e
00000190: 6368 6f60 2c20 616e 6420 607c 6020 696e  cho`, and `|` in
000001a0: 2074 6865 2074 6572 6d69 6e61 6c20 746f   the terminal to
000001b0: 2070 726f 7669 6465 2064 6174 6120 746f   provide data to
000001c0: 2060 7374 6469 6e60 2066 6f72 2061 2043   `stdin` for a C
000001d0: 2070 726f 6772 616d 2074 6f20 7265 6164   program to read
000001e0: 0a20 200a 2320 5072 6f6a 6563 7420 5375  .  .# Project Su
000001f0: 6d6d 6172 790a 0a54 6865 2067 6f61 6c20  mmary..The goal 
00000200: 6f66 2074 6869 7320 6c61 6220 6973 2074  of this lab is t
00000210: 6f20 7772 6974 6520 6120 7072 6f67 7261  o write a progra
00000220: 6d20 7468 6174 206d 696d 6963 7320 736f  m that mimics so
00000230: 6d65 206f 6620 7468 6520 6675 6e63 7469  me of the functi
00000240: 6f6e 616c 6974 7920 6f66 2074 6865 2060  onality of the `
00000250: 7878 6460 2063 6f6d 6d61 6e64 206c 696e  xxd` command lin
00000260: 6520 746f 6f6c 2074 6861 7420 6372 6561  e tool that crea
00000270: 7465 7320 6120 6865 7820 6f72 2062 6974  tes a hex or bit
00000280: 7320 6475 6d70 206f 7220 6974 7320 696e  s dump or its in
00000290: 7075 7420 2873 6565 2060 6d61 6e20 7878  put (see `man xx
000002a0: 6460 292e 2054 6865 2070 6172 7420 6f66  d`). The part of
000002b0: 2060 7878 6460 2074 6f20 6d69 6d69 6320   `xxd` to mimic 
000002c0: 6973 2069 7473 2064 6566 6175 6c74 2062  is its default b
000002d0: 6568 6176 696f 7220 7768 656e 2072 6561  ehavior when rea
000002e0: 6469 6e67 2066 726f 6d20 7374 616e 6461  ding from standa
000002f0: 7264 2069 6e70 7574 2074 6861 7420 6765  rd input that ge
00000300: 6e65 7261 7465 7320 6120 6865 7820 6475  nerates a hex du
00000310: 6d70 206f 6620 7468 6520 696e 7075 7420  mp of the input 
00000320: 616e 6420 7468 6520 602d 6260 2028 602d  and the `-b` (`-
00000330: 6269 7473 6029 2066 6c61 6720 7468 6174  bits`) flag that
00000340: 2073 7769 7463 6865 7320 6974 2074 6f20   switches it to 
00000350: 6120 6269 7473 2028 6269 6e61 7279 2064  a bits (binary d
00000360: 6967 6974 7329 2064 756d 7020 6f66 2074  igits) dump of t
00000370: 6865 2069 6e70 7574 2e20 0a0a 5468 6520  he input. ..The 
00000380: 5b6d 7978 7864 2e63 5d28 6d79 7878 642e  [myxxd.c](myxxd.
00000390: 6329 2066 696c 6520 636f 6e74 6169 6e73  c) file contains
000003a0: 2063 6f64 6520 746f 2070 6172 7365 2074   code to parse t
000003b0: 6865 2063 6f6d 6d61 6e64 206c 696e 6520  he command line 
000003c0: 6f70 7469 6f6e 7320 2860 7061 7273 6543  options (`parseC
000003d0: 6f6d 6d61 6e64 4c69 6e65 6029 2061 6e64  ommandLine`) and
000003e0: 2074 6865 6e20 6361 6c6c 2074 6865 2061   then call the a
000003f0: 7070 726f 7072 6961 7465 206f 7574 7075  ppropriate outpu
00000400: 7420 6675 6e63 7469 6f6e 2066 6f72 2074  t function for t
00000410: 6865 2068 6578 2064 756d 7020 2860 7265  he hex dump (`re
00000420: 6164 416e 6450 7269 6e74 496e 7075 7441  adAndPrintInputA
00000430: 7348 6578 6029 206f 7220 7468 6520 6269  sHex`) or the bi
00000440: 7473 2064 756d 7020 2860 7265 6164 416e  ts dump (`readAn
00000450: 6450 7269 6e74 496e 7075 7441 7342 6974  dPrintInputAsBit
00000460: 7360 292e 2054 6865 2066 696c 6520 616c  s`). The file al
00000470: 736f 2063 6f6e 7461 696e 7320 616e 2069  so contains an i
00000480: 6d70 6c65 6d65 6e74 6174 696f 6e20 6f66  mplementation of
00000490: 2060 7265 6164 416e 6450 7269 6e74 496e   `readAndPrintIn
000004a0: 7075 7441 7348 6578 6020 746f 2068 616e  putAsHex` to han
000004b0: 646c 6520 7265 6164 696e 6720 6672 6f6d  dle reading from
000004c0: 2060 7374 6469 6e60 2075 7369 6e67 2074   `stdin` using t
000004d0: 6865 2060 6672 6561 6460 2043 206c 6962  he `fread` C lib
000004e0: 7261 7279 2066 756e 6374 696f 6e2e 2054  rary function. T
000004f0: 6865 2069 6d70 6c65 6d65 6e74 6174 696f  he implementatio
00000500: 6e20 6f66 2060 7265 6164 416e 6450 7269  n of `readAndPri
00000510: 6e74 496e 7075 7441 7348 6578 6020 6361  ntInputAsHex` ca
00000520: 6c6c 7320 7477 6f20 756e 696d 706c 656d  lls two unimplem
00000530: 656e 7465 6420 6675 6e63 7469 6f6e 7320  ented functions 
00000540: 6070 7269 6e74 4461 7461 4173 4865 7860  `printDataAsHex`
00000550: 2061 6e64 2060 7072 696e 7444 6174 6141   and `printDataA
00000560: 7343 6861 7273 6020 7468 6174 2070 726f  sChars` that pro
00000570: 6475 6365 2074 6865 2061 6374 7561 6c20  duce the actual 
00000580: 6865 7820 6475 6d70 2e20 496d 706c 656d  hex dump. Implem
00000590: 656e 7469 6e67 2074 6865 7365 2074 776f  enting these two
000005a0: 2066 756e 6374 696f 6e73 2069 7320 7468   functions is th
000005b0: 6520 7374 6172 7469 6e67 2070 6f69 6e74  e starting point
000005c0: 2066 6f72 2074 6865 206c 6162 2e20 4f6e   for the lab. On
000005d0: 6365 2074 6865 7365 2061 7265 2069 6d70  ce these are imp
000005e0: 6c65 6d65 6e74 6564 2061 6e64 2074 6573  lemented and tes
000005f0: 7465 642c 2066 6f6c 6c6f 7720 7468 6520  ted, follow the 
00000600: 7361 6d65 2073 7472 7563 7475 7265 2074  same structure t
00000610: 6f20 696d 706c 656d 656e 7420 6072 6561  o implement `rea
00000620: 6441 6e64 5072 696e 7449 6e70 7574 4173  dAndPrintInputAs
00000630: 4269 7473 603a 2074 6865 2066 756e 6374  Bits`: the funct
00000640: 696f 6e20 7368 6f75 6c64 2062 6520 696d  ion should be im
00000650: 706c 656d 656e 7465 6420 7573 696e 6720  plemented using 
00000660: 7468 6520 7361 6d65 2064 6563 6f6d 706f  the same decompo
00000670: 7369 7469 6f6e 206f 6620 7468 6520 7072  sition of the pr
00000680: 6f62 6c65 6d20 6173 2069 6e20 6072 6561  oblem as in `rea
00000690: 6441 6e64 5072 696e 7449 6e70 7574 4173  dAndPrintInputAs
000006a0: 4865 7860 2062 7574 2064 6966 6665 7220  Hex` but differ 
000006b0: 696e 2074 6865 206e 756d 6265 7220 6f66  in the number of
000006c0: 2062 7974 6573 2072 6561 6420 6174 2061   bytes read at a
000006d0: 2074 696d 6520 6279 2060 6672 6561 6460   time by `fread`
000006e0: 2061 6e64 2068 6f77 2074 686f 7365 2062   and how those b
000006f0: 7974 6573 2061 7265 2064 6973 706c 6179  ytes are display
00000700: 6564 2069 6e20 7468 6520 6f75 7470 7574  ed in the output
00000710: 2e20 200a 0a23 2057 6865 7265 2074 6f20  .  ..# Where to 
00000720: 7374 6172 743f 0a0a 2020 312e 2052 6561  start?..  1. Rea
00000730: 6420 616c 6c20 6f66 2074 6865 2077 7269  d all of the wri
00000740: 7465 7570 2e0a 2020 322e 2050 6c61 7920  teup..  2. Play 
00000750: 7769 7468 2060 7878 6460 2061 6e64 2049  with `xxd` and I
00000760: 2f4f 2072 6564 6972 6563 7469 6f6e 2061  /O redirection a
00000770: 7320 796f 7520 7265 6164 2061 626f 7574  s you read about
00000780: 2074 6865 6d20 696e 2074 6865 2077 7269   them in the wri
00000790: 7465 7570 2e0a 2020 332e 2053 7475 6479  teup..  3. Study
000007a0: 2074 6865 2073 7461 7274 6572 2063 6f64   the starter cod
000007b0: 6520 696e 205b 6d79 7878 642e 635d 286d  e in [myxxd.c](m
000007c0: 7978 7864 2e63 2920 616e 6420 636f 7272  yxxd.c) and corr
000007d0: 656c 6174 6520 6974 2077 6974 6820 7468  elate it with th
000007e0: 6520 7772 6974 6575 702e 0a20 2034 2e20  e writeup..  4. 
000007f0: 5772 6974 6520 6120 6665 7720 7369 6d70  Write a few simp
00000800: 6c65 2074 6573 7420 696e 7075 7473 2074  le test inputs t
00000810: 6f20 6472 6976 6520 6465 7665 6c6f 706d  o drive developm
00000820: 656e 7420 2873 7461 7274 2073 6d61 6c6c  ent (start small
00000830: 292e 0a20 2035 2e20 496d 706c 656d 656e  )..  5. Implemen
00000840: 7420 6076 6f69 6420 7072 696e 7444 6174  t `void printDat
00000850: 6141 7348 6578 2875 6e73 6967 6e65 6420  aAsHex(unsigned 
00000860: 6368 6172 2a20 6461 7461 2c20 7369 7a65  char* data, size
00000870: 5f74 2073 697a 6529 6020 616e 6420 7465  _t size)` and te
00000880: 7374 2069 742e 0a20 2036 2e20 496d 706c  st it..  6. Impl
00000890: 656d 656e 7420 6076 6f69 6420 7072 696e  ement `void prin
000008a0: 7444 6174 6141 7343 6861 7273 2875 6e73  tDataAsChars(uns
000008b0: 6967 6e65 6420 6368 6172 2a20 6461 7461  igned char* data
000008c0: 2c20 7369 7a65 5f74 2073 697a 6529 6020  , size_t size)` 
000008d0: 616e 6420 7465 7374 2069 742e 0a20 2037  and test it..  7
000008e0: 2e20 5465 7374 2061 2066 6577 2062 6967  . Test a few big
000008f0: 6765 7220 696e 7075 7473 2061 6e64 2075  ger inputs and u
00000900: 7365 2064 6966 6620 746f 2063 6f6d 7061  se diff to compa
00000910: 7265 2074 6865 206f 7574 7075 742e 0a20  re the output.. 
00000920: 2038 2e20 466f 6c6c 6f77 2074 6865 2070   8. Follow the p
00000930: 6174 7465 726e 2069 6e20 6072 6561 6441  attern in `readA
00000940: 6e64 5072 696e 7449 6e70 7574 4173 4865  ndPrintInputAsHe
00000950: 7860 2074 6f20 696d 706c 656d 656e 7420  x` to implement 
00000960: 6076 6f69 6420 7265 6164 416e 6450 7269  `void readAndPri
00000970: 6e74 496e 7075 7441 7342 6974 7328 4649  ntInputAsBits(FI
00000980: 4c45 2a20 696e 7075 7429 602e 0a0a 2320  LE* input)`...# 
00000990: 5375 626d 6973 7369 6f6e 0a0a 5570 6c6f  Submission..Uplo
000009a0: 6164 2074 6865 2066 696e 616c 205b 6d79  ad the final [my
000009b0: 7878 642e 635d 286d 7978 7864 2e63 2920  xxd.c](myxxd.c) 
000009c0: 6669 6c65 2074 6f20 5b43 616e 7661 735d  file to [Canvas]
000009d0: 2868 7474 703a 2f2f 6361 6e76 6173 2e62  (http://canvas.b
000009e0: 7975 2e65 6475 2920 666f 7220 7375 626d  yu.edu) for subm
000009f0: 6973 7369 6f6e 2e20 4120 636f 7272 6563  ission. A correc
00000a00: 7420 736f 6c75 7469 6f6e 2065 7861 6374  t solution exact
00000a10: 6c79 206d 6174 6368 6573 2074 6865 206f  ly matches the o
00000a20: 7574 7075 7420 6672 6f6d 2060 7878 6460  utput from `xxd`
00000a30: 2077 6974 6820 616e 6420 7769 7468 6f75   with and withou
00000a40: 7420 7468 6520 602d 6260 2066 6c61 6720  t the `-b` flag 
00000a50: 6f6e 2061 6e79 2069 6e70 7574 2074 6f20  on any input to 
00000a60: 6073 7464 696e 602e 0a0a 2320 5275 6272  `stdin`...# Rubr
00000a70: 6963 0a0a 5468 6520 5441 2773 2062 7569  ic..The TA's bui
00000a80: 6c64 2074 6865 2073 6f6c 7574 696f 6e20  ld the solution 
00000a90: 616e 6420 7465 7374 2069 7420 6167 6169  and test it agai
00000aa0: 6e73 7420 6120 7365 7420 6f66 2069 6e70  nst a set of inp
00000ab0: 7574 2066 696c 6573 2062 7920 636f 6d70  ut files by comp
00000ac0: 6172 696e 6720 7468 6520 6f75 7470 7574  aring the output
00000ad0: 2066 726f 6d20 7468 6520 7072 6f67 7261   from the progra
00000ae0: 6d20 746f 2074 6861 7420 6f66 2060 7878  m to that of `xx
00000af0: 6460 2075 7369 6e67 2060 6469 6666 602e  d` using `diff`.
00000b00: 0a0a 2020 2a20 6076 6f69 6420 7072 696e  ..  * `void prin
00000b10: 7444 6174 6141 7348 6578 2875 6e73 6967  tDataAsHex(unsig
00000b20: 6e65 6420 6368 6172 2a20 6461 7461 2c20  ned char* data, 
00000b30: 7369 7a65 5f74 2073 697a 6529 6020 2834  size_t size)` (4
00000b40: 3020 706f 696e 7473 290a 2020 2a20 6076  0 points).  * `v
00000b50: 6f69 6420 7072 696e 7444 6174 6141 7343  oid printDataAsC
00000b60: 6861 7273 2875 6e73 6967 6e65 6420 6368  hars(unsigned ch
00000b70: 6172 2a20 6461 7461 2c20 7369 7a65 5f74  ar* data, size_t
00000b80: 2073 697a 6529 6020 2834 3020 706f 696e   size)` (40 poin
00000b90: 7473 290a 2020 2a20 4578 6163 7420 6d61  ts).  * Exact ma
00000ba0: 7463 6820 7769 7468 2060 7878 6460 2064  tch with `xxd` d
00000bb0: 6566 6175 6c74 2062 6568 6176 696f 7220  efault behavior 
00000bc0: 6f6e 2061 6c6c 2069 6e70 7574 2066 696c  on all input fil
00000bd0: 6573 2028 3130 2070 6f69 6e74 7329 0a20  es (10 points). 
00000be0: 202a 2060 766f 6964 2072 6561 6441 6e64   * `void readAnd
00000bf0: 5072 696e 7449 6e70 7574 4173 4269 7473  PrintInputAsBits
00000c00: 2846 494c 452a 2069 6e70 7574 2960 2028  (FILE* input)` (
00000c10: 3830 2070 6f69 6e74 7329 0a20 202a 2045  80 points).  * E
00000c20: 7861 6374 206d 6174 6368 2077 6974 6820  xact match with 
00000c30: 6078 7864 202d 6260 206f 6e20 616c 6c20  `xxd -b` on all 
00000c40: 696e 7075 7420 6669 6c65 7320 2831 3020  input files (10 
00000c50: 706f 696e 7473 290a 2020 2a20 5374 796c  points).  * Styl
00000c60: 6520 2832 3020 706f 696e 7473 290a 0a23  e (20 points)..#
00000c70: 2047 6574 7469 6e67 2074 6865 2053 7461   Getting the Sta
00000c80: 7274 6572 2043 6f64 650a 0a43 6f70 7969  rter Code..Copyi
00000c90: 6e67 205b 6d79 7878 642e 635d 286d 7978  ng [myxxd.c](myx
00000ca0: 7864 2e63 2920 696e 2074 6865 2062 726f  xd.c) in the bro
00000cb0: 7773 6572 206f 7220 646f 776e 6c6f 6164  wser or download
00000cc0: 696e 6720 7468 6520 636f 6465 2069 6e20  ing the code in 
00000cd0: 7468 6520 6272 6f77 7365 7220 6973 206f  the browser is o
00000ce0: 6e65 2077 6179 2074 6f20 6765 7420 7468  ne way to get th
00000cf0: 6520 636f 6465 2c20 6275 7420 6966 2074  e code, but if t
00000d00: 6865 2077 6f72 6b20 6973 2062 6569 6e67  he work is being
00000d10: 2064 6f6e 6520 7265 6d6f 7465 6c79 2077   done remotely w
00000d20: 6974 6820 6073 7368 602c 2074 6865 6e20  ith `ssh`, then 
00000d30: 7468 6520 6669 6c65 2069 7320 6f6e 2074  the file is on t
00000d40: 6865 2077 726f 6e67 206d 6163 6869 6e65  he wrong machine
00000d50: 2e20 5468 6520 6073 6370 6020 746f 6f6c  . The `scp` tool
00000d60: 2063 616e 2063 6f70 7920 7468 6520 6669   can copy the fi
00000d70: 6c65 2074 6f20 7468 6520 7265 6d6f 7465  le to the remote
00000d80: 206d 6163 6869 6e65 2c20 6275 7420 7468   machine, but th
00000d90: 6572 6520 6973 2061 6e20 6561 7369 6572  ere is an easier
00000da0: 2073 6f6c 7574 696f 6e73 2075 7369 6e67   solutions using
00000db0: 2060 6769 7460 2e0a 0a54 6865 206c 6162   `git`...The lab
00000dc0: 7320 6172 6520 696e 2061 2060 6769 7460  s are in a `git`
00000dd0: 2072 6570 6f73 6974 6f72 7920 6e61 6d65   repository name
00000de0: 6420 5b62 7975 2d63 732d 3232 342d 6c61  d [byu-cs-224-la
00000df0: 6273 5d28 6874 7470 733a 2f2f 6269 7462  bs](https://bitb
00000e00: 7563 6b65 742e 6f72 672f 6279 7563 7332  ucket.org/byucs2
00000e10: 3234 2f62 7975 2d63 732d 3232 342d 6c61  24/byu-cs-224-la
00000e20: 6273 2f73 7263 2f6d 6173 7465 722f 292e  bs/src/master/).
00000e30: 2054 6865 7265 2069 7320 6120 6275 7474   There is a butt
00000e40: 6f6e 206f 6e20 7468 6520 7061 6765 206e  on on the page n
00000e50: 616d 6564 202a 2a43 6c6f 6e65 2a2a 2c20  amed **Clone**, 
00000e60: 636c 6963 6b20 7468 6174 2062 7574 746f  click that butto
00000e70: 6e2c 2063 6f70 7920 7468 6520 636f 6d6d  n, copy the comm
00000e80: 616e 642c 2061 6e64 2070 6173 7420 6974  and, and past it
00000e90: 2069 6e74 6f20 7468 6520 7465 726d 696e   into the termin
00000ea0: 616c 2e20 4974 2077 696c 6c20 646f 776e  al. It will down
00000eb0: 6c6f 6164 2074 6865 2066 696c 6573 2064  load the files d
00000ec0: 6972 6563 746c 7920 746f 2074 6865 2072  irectly to the r
00000ed0: 656d 6f74 6520 6d61 6368 696e 652e 2048  emote machine. H
00000ee0: 6572 6520 6973 2074 6865 2063 6f6d 6d61  ere is the comma
00000ef0: 6e64 2074 6f20 7361 7665 2074 696d 6520  nd to save time 
00000f00: 7769 7468 2066 6f6c 6c6f 7769 6e67 2074  with following t
00000f10: 6865 206c 696e 6b3a 0a0a 6060 600a 6769  he link:..```.gi
00000f20: 7420 636c 6f6e 6520 6874 7470 733a 2f2f  t clone https://
00000f30: 6269 7462 7563 6b65 742e 6f72 672f 6279  bitbucket.org/by
00000f40: 7563 7332 3234 2f62 7975 2d63 732d 3232  ucs224/byu-cs-22
00000f50: 342d 6c61 6273 2f73 7263 2f6d 6173 7465  4-labs/src/maste
00000f60: 722f 0a60 6060 0a0a 6067 6974 6020 6973  r/.```..`git` is
00000f70: 206e 6f74 2070 6172 7420 6f66 2074 6869   not part of thi
00000f80: 7320 636f 7572 7365 2e20 4974 2069 7320  s course. It is 
00000f90: 6a75 7374 2061 2063 6f6e 7665 6e69 656e  just a convenien
00000fa0: 7420 7761 7920 746f 2064 6973 7472 6962  t way to distrib
00000fb0: 7574 6520 6669 6c65 732e 204f 6e63 6520  ute files. Once 
00000fc0: 7468 6520 6669 6c65 7320 6578 6973 7420  the files exist 
00000fd0: 6f6e 2074 6865 206d 6163 6869 6e65 2c20  on the machine, 
00000fe0: 6e6f 7468 696e 6720 656c 7365 2069 7320  nothing else is 
00000ff0: 646f 6e65 2077 6974 6820 6769 7420 756e  done with git un
00001000: 7469 6c20 7468 6520 6e65 7874 206c 6162  til the next lab
00001010: 2c20 696e 2077 6869 6368 2063 6173 6520  , in which case 
00001020: 7468 6520 636f 6d6d 616e 6420 6067 6974  the command `git
00001030: 2070 756c 6c60 2069 6e20 7468 6520 6469   pull` in the di
00001040: 7265 6374 6f72 7920 7769 6c6c 2067 6574  rectory will get
00001050: 2074 6865 206e 6577 2066 696c 6573 206f   the new files o
00001060: 7220 7468 6520 7265 706f 7369 746f 7279  r the repository
00001070: 2063 616e 2062 6520 636c 6f6e 6564 2061   can be cloned a
00001080: 6761 696e 2069 6e20 6120 6469 6666 6572  gain in a differ
00001090: 656e 7420 6c6f 6361 7469 6f6e 2e0a 0a23  ent location...#
000010a0: 2050 726f 6a65 6374 2044 6574 6169 6c73   Project Details
000010b0: 0a0a 4361 7265 6675 6c6c 7920 7265 6164  ..Carefully read
000010c0: 696e 6720 7468 6520 7072 6f6a 6563 7420  ing the project 
000010d0: 6465 7461 696c 7320 6973 206c 696b 656c  details is likel
000010e0: 7920 746f 2073 6176 6520 686f 7572 7320  y to save hours 
000010f0: 696e 2063 6f6d 706c 6574 696e 6720 7468  in completing th
00001100: 6520 6c61 622e 2054 616b 6520 7469 6d65  e lab. Take time
00001110: 2074 6f20 756e 6465 7273 7461 6e64 202a   to understand *
00001120: 2a77 6861 742a 2a20 6e65 6564 7320 746f  *what** needs to
00001130: 2062 6520 646f 6e65 2c20 7468 656e 2070   be done, then p
00001140: 6c61 6e20 6f75 7420 2a2a 686f 772a 2a20  lan out **how** 
00001150: 746f 2067 6574 2069 7420 646f 6e65 2c20  to get it done, 
00001160: 616e 6420 6669 6e61 6c6c 7920 646f 2069  and finally do i
00001170: 742e 2045 6163 6820 6f66 2074 6865 2073  t. Each of the s
00001180: 6563 7469 6f6e 7320 6265 6c6f 7720 6973  ections below is
00001190: 2069 6e74 656e 6465 6420 746f 2061 6e73   intended to ans
000011a0: 7765 7220 7468 6520 2a2a 7768 6174 2a2a  wer the **what**
000011b0: 2061 6e64 202a 2a68 6f77 2a2a 2066 6f72   and **how** for
000011c0: 2074 6869 7320 7072 6f6a 6563 742e 0a0a   this project...
000011d0: 2323 2042 7569 6c64 696e 6720 616e 6420  ## Building and 
000011e0: 5275 6e6e 696e 6720 7468 6520 5072 6f67  Running the Prog
000011f0: 7261 6d0a 0a54 6865 2070 726f 6772 616d  ram..The program
00001200: 2069 7320 6275 696c 7420 7769 7468 2074   is built with t
00001210: 6865 2066 6f6c 6c6f 7769 6e67 2063 6f6d  he following com
00001220: 6d61 6e64 2e0a 0a60 6060 0a24 2067 6363  mand...```.$ gcc
00001230: 202d 5761 6c6c 202d 6720 6d79 7878 642e   -Wall -g myxxd.
00001240: 6320 2d6f 206d 7978 7864 0a60 6060 0a0a  c -o myxxd.```..
00001250: 5468 6520 602d 5761 6c6c 6020 7465 6c6c  The `-Wall` tell
00001260: 7320 6067 6363 6020 746f 2069 7373 7565  s `gcc` to issue
00001270: 2077 6172 6e69 6e67 7320 616e 2061 6e79   warnings an any
00001280: 7468 696e 6720 7468 6174 2073 6565 6d73  thing that seems
00001290: 206f 6464 2e20 5468 6520 602d 6f60 206e   odd. The `-o` n
000012a0: 616d 6573 2074 6865 2065 7865 6375 7461  ames the executa
000012b0: 626c 6520 6173 2060 6d79 7878 6460 2e20  ble as `myxxd`. 
000012c0: 5468 6520 602d 6760 2069 6e63 6c75 6465  The `-g` include
000012d0: 7320 6465 6275 6720 696e 666f 726d 6174  s debug informat
000012e0: 696f 6e20 696e 2074 6865 2065 7865 6375  ion in the execu
000012f0: 7461 626c 6520 616e 6420 6973 2075 7365  table and is use
00001300: 6675 6c20 7768 656e 2075 7369 6e67 2060  ful when using `
00001310: 6764 6260 2028 7365 6520 2a44 6562 7567  gdb` (see *Debug
00001320: 6769 6e67 2077 6974 6820 6764 622a 292e  ging with gdb*).
00001330: 0a0a 5275 6e6e 696e 6720 7468 6520 7072  ..Running the pr
00001340: 6f67 7261 6d20 6973 2065 7175 616c 6c79  ogram is equally
00001350: 2061 7320 6561 7379 2e0a 0a60 6060 0a24   as easy...```.$
00001360: 202e 2f6d 7978 7864 0a60 6060 0a0a 2323   ./myxxd.```..##
00001370: 2050 726f 7669 6469 6e67 2049 6e70 7574   Providing Input
00001380: 0a0a 2a53 7461 6e64 6172 6420 696e 7075  ..*Standard inpu
00001390: 742a 2069 7320 6571 7569 7661 6c65 6e74  t* is equivalent
000013a0: 2074 6f20 7468 6520 696e 7075 7420 7374   to the input st
000013b0: 7265 616d 2060 6369 6e60 2069 6e20 7468  ream `cin` in th
000013c0: 6520 432b 2b20 6c61 6e67 7561 6765 2e20  e C++ language. 
000013d0: 5468 6520 4320 6c61 6e67 7561 6765 2065  The C language e
000013e0: 7175 6976 616c 656e 7420 6973 2060 7374  quivalent is `st
000013f0: 6469 6e60 2061 6e64 2069 7320 6465 6669  din` and is defi
00001400: 6e65 6420 696e 2060 7374 6469 6f2e 6860  ned in `stdio.h`
00001410: 2028 652e 672e 2c20 6023 696e 636c 7564   (e.g., `#includ
00001420: 6520 3c73 7464 696f 2e68 3e60 292e 2041  e <stdio.h>`). A
00001430: 7320 696e 2043 2b2b 2c20 7265 6164 696e  s in C++, readin
00001440: 6720 6672 6f6d 2060 7374 6469 6e60 2072  g from `stdin` r
00001450: 6561 6473 2074 7970 6564 2063 6861 7261  eads typed chara
00001460: 6374 6572 7320 6174 2074 6865 206b 6579  cters at the key
00001470: 626f 6172 642e 204b 6579 626f 6172 6420  board. Keyboard 
00001480: 696e 7075 7420 6973 2065 6173 793b 2072  input is easy; r
00001490: 756e 2060 7878 6460 2061 6e64 2074 6865  un `xxd` and the
000014a0: 6e20 7468 656e 2074 7970 6520 604c 6162  n then type `Lab
000014b0: 2030 3a20 6d79 7878 6460 2066 6f6c 6c6f   0: myxxd` follo
000014c0: 7765 6420 6279 2074 6865 2072 6574 7572  wed by the retur
000014d0: 6e2e 2054 6865 7265 2073 686f 756c 6420  n. There should 
000014e0: 6265 2073 7475 6666 2070 7269 6e74 6564  be stuff printed
000014f0: 206f 7574 206f 6e20 7468 6520 7265 7475   out on the retu
00001500: 726e 2e20 4265 6c6f 7720 6973 2077 6861  rn. Below is wha
00001510: 7420 616c 6c20 7468 6973 206c 6f6f 6b73  t all this looks
00001520: 206c 696b 6520 6f6e 2074 6865 2063 6f6d   like on the com
00001530: 6d61 6e64 206c 696e 652e 0a0a 6060 600a  mand line...```.
00001540: 2420 7878 640a 4c61 6220 303a 206d 7978  $ xxd.Lab 0: myx
00001550: 7864 0a30 3030 3030 3030 303a 2034 6336  xd.00000000: 4c6
00001560: 3120 3632 3230 2033 3033 6120 3230 3664  1 6220 303a 206d
00001570: 2037 3937 3820 3738 3634 2030 6120 2020   7978 7864 0a   
00001580: 2020 2020 2020 4c61 6220 303a 206d 7978        Lab 0: myx
00001590: 7864 2e0a 6060 600a 0a54 6865 2070 726f  xd..```..The pro
000015a0: 6772 616d 2072 6561 6473 2069 6e70 7574  gram reads input
000015b0: 2075 6e74 696c 2069 7420 6973 2065 6e64   until it is end
000015c0: 6564 2e20 546f 2065 6e64 2074 6865 2069  ed. To end the i
000015d0: 6e70 7574 2068 6974 2072 6574 7572 6e20  nput hit return 
000015e0: 666f 6c6c 6f77 6564 2062 7920 6043 5452  followed by `CTR
000015f0: 4c2d 6460 2028 652e 672e 2c20 686f 6c64  L-d` (e.g., hold
00001600: 2064 6f77 6e20 7468 6520 6063 6f6e 7472   down the `contr
00001610: 6f6c 6020 6b65 7920 616e 6420 7768 696c  ol` key and whil
00001620: 6520 686f 6c64 696e 6720 6974 2074 7970  e holding it typ
00001630: 6520 6064 6029 2e20 496e 2073 6f6d 6520  e `d`). In some 
00001640: 7072 6573 656e 7461 7469 6f6e 7320 6043  presentations `C
00001650: 5452 4c2d 6460 2069 7320 616c 736f 2069  TRL-d` is also i
00001660: 6e64 6963 6174 6564 2062 7920 605e 6460  ndicated by `^d`
00001670: 2e20 426f 7468 206d 6561 6e20 7468 6520  . Both mean the 
00001680: 7361 6d65 2074 6869 6e67 2e20 4120 6e65  same thing. A ne
00001690: 776c 696e 6520 736f 6d65 7469 6d65 7320  wline sometimes 
000016a0: 7472 6967 6765 7273 206f 7574 7075 7420  triggers output 
000016b0: 6966 206d 616e 7920 6368 6172 6163 7465  if many characte
000016c0: 7273 2068 6176 6520 6265 656e 2074 7970  rs have been typ
000016d0: 6564 2e20 5468 6520 7072 6f67 7261 6d20  ed. The program 
000016e0: 6973 2073 7469 6c6c 2072 6561 6469 6e67  is still reading
000016f0: 2069 6e70 7574 2069 6e20 7468 6174 2063   input in that c
00001700: 6173 6520 616e 6420 636f 6e74 696e 7565  ase and continue
00001710: 7320 746f 2072 6561 6420 756e 7469 6c20  s to read until 
00001720: 7468 6520 696e 7075 7420 6973 2065 6e64  the input is end
00001730: 6564 2077 6974 6820 6043 5452 4c2d 6460  ed with `CTRL-d`
00001740: 2e0a 0a54 7970 696e 6720 696e 7075 7420  ...Typing input 
00001750: 6174 2074 6865 206b 6579 626f 6172 6420  at the keyboard 
00001760: 666f 7220 6465 7665 6c6f 7069 6e67 2061  for developing a
00001770: 6e64 2064 6562 7567 6769 6e67 2061 2070  nd debugging a p
00001780: 726f 6772 616d 2069 7320 626f 7468 2074  rogram is both t
00001790: 6564 696f 7573 2061 6e64 2074 696d 6520  edious and time 
000017a0: 636f 6e73 756d 696e 672e 2054 6865 2063  consuming. The c
000017b0: 6f6d 6d61 6e64 206c 696e 6520 696e 2074  ommand line in t
000017c0: 6865 2073 6865 6c6c 2070 726f 7669 6465  he shell provide
000017d0: 7320 6120 6665 7720 6261 7369 6320 746f  s a few basic to
000017e0: 6f6c 7320 746f 2061 7574 6f6d 6174 6520  ols to automate 
000017f0: 2861 6e64 2073 696d 706c 6966 7929 2069  (and simplify) i
00001800: 6e70 7574 2074 6f20 6073 7464 696e 6020  nput to `stdin` 
00001810: 696e 2074 6865 2066 6f72 6d20 6f66 202a  in the form of *
00001820: 492f 4f20 7265 6469 7265 6374 696f 6e2a  I/O redirection*
00001830: 2061 6e64 202a 5069 7065 732a 2e20 492f   and *Pipes*. I/
00001840: 4f20 7265 6469 7265 6374 696f 6e20 6566  O redirection ef
00001850: 6665 6374 6976 656c 7920 6368 616e 6765  fectively change
00001860: 7320 7768 6572 6520 696e 7075 7420 746f  s where input to
00001870: 2060 7374 6469 6e60 2063 6f6d 6573 2066   `stdin` comes f
00001880: 726f 6d20 616e 6420 6f75 7470 7574 2066  rom and output f
00001890: 726f 6d20 6120 7072 6f67 7261 6d20 676f  rom a program go
000018a0: 6573 2074 6f20 2873 6565 202a 2a43 6865  es to (see **Che
000018b0: 636b 696e 6720 4f75 7470 7574 2a2a 2062  cking Output** b
000018c0: 656c 6f77 292e 200a 0a41 202a 7069 7065  elow). ..A *pipe
000018d0: 2a20 6973 2075 7365 6420 746f 2063 6f6e  * is used to con
000018e0: 6e65 6374 2074 6865 206f 7574 7075 7420  nect the output 
000018f0: 6f66 206f 6e65 2070 726f 6772 616d 2074  of one program t
00001900: 6f20 7468 6520 696e 7075 7420 6f66 2061  o the input of a
00001910: 6e6f 7468 6572 2070 726f 6772 616d 2e20  nother program. 
00001920: 4120 7069 7065 2069 7320 6372 6561 7465  A pipe is create
00001930: 6420 7769 7468 2074 6865 2060 7c60 2073  d with the `|` s
00001940: 796d 626f 6c20 616e 6420 7265 7175 6972  ymbol and requir
00001950: 6573 2061 2070 726f 6772 616d 2074 6861  es a program tha
00001960: 7420 6765 6e65 7261 7465 7320 6f75 7470  t generates outp
00001970: 7574 2e20 5468 6973 206c 6162 2075 7365  ut. This lab use
00001980: 7320 7477 6f20 7375 6368 2070 726f 6772  s two such progr
00001990: 616d 733a 2060 6563 686f 6020 616e 6420  ams: `echo` and 
000019a0: 6063 6174 602e 2054 6865 2060 6563 686f  `cat`. The `echo
000019b0: 6020 7072 6f67 7261 6d20 7772 6974 6573  ` program writes
000019c0: 2061 6e79 2073 7065 6369 6669 6564 206f   any specified o
000019d0: 7065 7261 6e64 7320 746f 202a 7374 616e  perands to *stan
000019e0: 6461 7264 206f 7574 7075 742a 2028 7365  dard output* (se
000019f0: 6520 606d 616e 2065 6368 6f60 292e 2053  e `man echo`). S
00001a00: 7461 6e64 6172 6420 6f75 7470 7574 2069  tandard output i
00001a10: 7320 6571 7569 7661 6c65 6e74 2074 6f20  s equivalent to 
00001a20: 6063 6f75 7460 2069 6e20 7468 6520 432b  `cout` in the C+
00001a30: 2b20 6c61 6e67 7561 6765 2e20 5468 6520  + language. The 
00001a40: 4320 6c61 6e67 7561 6765 2065 7175 6976  C language equiv
00001a50: 616c 656e 7420 6973 2060 7374 646f 7574  alent is `stdout
00001a60: 6020 616e 6420 6973 2064 6566 696e 6564  ` and is defined
00001a70: 2069 6e20 6073 7464 696f 2e68 602e 200a   in `stdio.h`. .
00001a80: 0a60 6060 0a24 2065 6368 6f20 224c 6162  .```.$ echo "Lab
00001a90: 2030 3a20 6d79 7878 6422 0a4c 6162 2030   0: myxxd".Lab 0
00001aa0: 3a20 6d79 7878 640a 6060 600a 0a41 2070  : myxxd.```..A p
00001ab0: 6970 6520 6973 2075 7365 6420 746f 2072  ipe is used to r
00001ac0: 6564 6972 6563 7420 6073 7464 6f75 7460  edirect `stdout`
00001ad0: 2066 726f 6d20 6563 686f 2074 6f20 6073   from echo to `s
00001ae0: 7464 696e 6020 666f 7220 6078 7864 602e  tdin` for `xxd`.
00001af0: 0a0a 6060 600a 2420 6563 686f 2022 4c61  ..```.$ echo "La
00001b00: 6220 303a 206d 7978 7864 2220 7c20 7878  b 0: myxxd" | xx
00001b10: 640a 3030 3030 3030 3030 3a20 3463 3631  d.00000000: 4c61
00001b20: 2036 3232 3020 3330 3361 2032 3036 6420   6220 303a 206d 
00001b30: 3739 3738 2037 3836 3420 3061 2020 2020  7978 7864 0a    
00001b40: 2020 2020 204c 6162 2030 3a20 6d79 7878       Lab 0: myxx
00001b50: 642e 0a60 6060 0a0a 4e6f 7720 6974 2069  d..```..Now it i
00001b60: 7320 706f 7373 6962 6c65 2074 6f20 7479  s possible to ty
00001b70: 7065 2074 6865 2069 6e70 7574 206f 6e63  pe the input onc
00001b80: 6520 6173 2061 6e20 6f70 6572 616e 6420  e as an operand 
00001b90: 746f 2074 6865 2060 6563 686f 6020 636f  to the `echo` co
00001ba0: 6d6d 616e 6420 616e 6420 7069 7065 2069  mmand and pipe i
00001bb0: 7473 206f 7574 7075 7420 746f 2074 6865  ts output to the
00001bc0: 2069 6e70 7574 206f 6620 6078 7864 602e   input of `xxd`.
00001bd0: 2055 7369 6e67 2074 6865 2075 702d 6172   Using the up-ar
00001be0: 726f 7720 6f6e 2074 6865 2063 6f6d 6d61  row on the comma
00001bf0: 6e64 206c 696e 6520 6d61 6b65 7320 6974  nd line makes it
00001c00: 2065 6173 7920 746f 2072 6570 6561 7420   easy to repeat 
00001c10: 7468 6520 636f 6d6d 616e 6420 6f76 6572  the command over
00001c20: 2061 6e64 206f 7665 7220 7769 7468 6f75   and over withou
00001c30: 7420 6861 7669 6e67 2074 6f20 7479 7065  t having to type
00001c40: 2069 7420 6167 6169 6e2e 2054 6865 2060   it again. The `
00001c50: 6563 686f 6020 636f 6d6d 616e 6420 7769  echo` command wi
00001c60: 7468 2061 2070 6970 6520 6973 2067 7265  th a pipe is gre
00001c70: 6174 2066 6f72 2073 696d 706c 6520 6f6e  at for simple on
00001c80: 652d 6c69 6e65 2069 6e70 7574 2066 6f72  e-line input for
00001c90: 2065 6172 6c79 2073 7461 6765 7320 6f66   early stages of
00001ca0: 2074 6573 7469 6e67 2062 6173 6963 2066   testing basic f
00001cb0: 756e 6374 696f 6e61 6c69 7479 2e20 0a0a  unctionality. ..
00001cc0: 5573 6520 7468 6520 6063 6174 6020 636f  Use the `cat` co
00001cd0: 6d6d 616e 6420 7769 7468 2074 6865 2070  mmand with the p
00001ce0: 6970 6520 6f72 202a 696e 7075 7420 7374  ipe or *input st
00001cf0: 7265 616d 2072 6564 6972 6563 742a 2074  ream redirect* t
00001d00: 6f20 6765 6e65 7261 7465 2062 6967 6765  o generate bigge
00001d10: 7220 696e 7075 742e 2054 6865 2060 6361  r input. The `ca
00001d20: 7460 2063 6f6d 6d61 6e64 2072 6561 6473  t` command reads
00001d30: 2061 2066 696c 6520 7365 7175 656e 7469   a file sequenti
00001d40: 616c 6c79 2061 6e64 2077 7269 7465 7320  ally and writes 
00001d50: 6974 2074 6f20 6073 7464 6f75 7460 2028  it to `stdout` (
00001d60: 7365 6520 606d 616e 2063 6174 6029 2e20  see `man cat`). 
00001d70: 0a0a 6060 600a 2420 6361 7420 696e 7075  ..```.$ cat inpu
00001d80: 742e 7478 7420 0a4c 6162 2030 3a20 6d79  t.txt .Lab 0: my
00001d90: 7878 640a 6060 600a 0a54 6865 2070 6970  xxd.```..The pip
00001da0: 6520 636f 6e6e 6563 7473 2074 6865 2060  e connects the `
00001db0: 7374 646f 7574 6020 6672 6f6d 2060 6361  stdout` from `ca
00001dc0: 7460 2074 6f20 7468 6520 6073 7464 696e  t` to the `stdin
00001dd0: 6020 666f 7220 6078 7864 602e 0a0a 6060  ` for `xxd`...``
00001de0: 600a 2420 6361 7420 696e 7075 742e 7478  `.$ cat input.tx
00001df0: 7420 7c20 7878 640a 3030 3030 3030 3030  t | xxd.00000000
00001e00: 3a20 3463 3631 2036 3232 3020 3330 3361  : 4c61 6220 303a
00001e10: 2032 3036 6420 3739 3738 2037 3836 3420   206d 7978 7864 
00001e20: 3061 2020 2020 2020 2020 204c 6162 2030  0a         Lab 0
00001e30: 3a20 6d79 7878 642e 0a60 6060 0a0a 496e  : myxxd..```..In
00001e40: 7075 7420 7374 7265 616d 2072 6564 6972  put stream redir
00001e50: 6563 7420 7369 6d70 6c69 6669 6573 2074  ect simplifies t
00001e60: 6865 2070 726f 6365 7373 2065 7665 6e20  he process even 
00001e70: 6675 7274 6865 722e 2049 7420 7369 6d70  further. It simp
00001e80: 6c79 2063 6f6e 6e65 6374 7320 6073 7464  ly connects `std
00001e90: 696e 6020 746f 2061 2066 696c 6520 6d61  in` to a file ma
00001ea0: 6b69 6e67 2069 6e70 7574 2061 2073 6e61  king input a sna
00001eb0: 702e 2054 6865 2060 3c60 2064 6f65 7320  p. The `<` does 
00001ec0: 7468 6520 7265 6469 7265 6374 696f 6e2e  the redirection.
00001ed0: 0a0a 6060 600a 2420 7878 6420 3c20 696e  ..```.$ xxd < in
00001ee0: 7075 742e 7478 7420 0a30 3030 3030 3030  put.txt .0000000
00001ef0: 303a 2034 6336 3120 3632 3230 2033 3033  0: 4c61 6220 303
00001f00: 6120 3230 3664 2037 3937 3820 3738 3634  a 206d 7978 7864
00001f10: 2030 6120 2020 2020 2020 2020 4c61 6220   0a         Lab 
00001f20: 303a 206d 7978 7864 2e0a 6060 600a 0a54  0: myxxd..```..T
00001f30: 6865 2070 726f 6772 616d 2c20 6078 7864  he program, `xxd
00001f40: 602c 2069 7320 6f6e 2074 6865 206c 6566  `, is on the lef
00001f50: 7420 6f66 2060 3c60 2061 6e64 2074 6865  t of `<` and the
00001f60: 2066 696c 652c 2060 696e 7075 742e 7478   file, `input.tx
00001f70: 7460 2069 7320 6f6e 2074 6865 2072 6967  t` is on the rig
00001f80: 6874 2e0a 0a60 6361 7460 2c20 6065 6368  ht...`cat`, `ech
00001f90: 6f60 2c20 607c 602c 2061 6e64 2060 3c60  o`, `|`, and `<`
00001fa0: 2067 6976 6520 6d61 6e79 206f 7074 696f   give many optio
00001fb0: 6e73 2074 6f20 7072 6f76 6964 696e 6720  ns to providing 
00001fc0: 696e 7075 7420 6672 6f6d 2074 6865 2063  input from the c
00001fd0: 6f6d 6d61 6e64 206c 696e 6520 746f 2060  ommand line to `
00001fe0: 7374 6469 6e60 2066 6f72 2074 6865 2070  stdin` for the p
00001ff0: 726f 6772 616d 2e20 5468 6573 6520 636f  rogram. These co
00002000: 6d62 696e 6564 2077 6974 6820 7468 6520  mbined with the 
00002010: 7570 2d61 7272 6f77 206b 6579 2073 686f  up-arrow key sho
00002020: 756c 6420 6d61 6b65 2074 6573 7469 6e67  uld make testing
00002030: 2074 6865 2070 726f 6772 616d 2065 6666   the program eff
00002040: 6963 6965 6e74 2061 6e64 2063 6f6e 7665  icient and conve
00002050: 6e69 656e 742e 0a0a 2323 204d 616b 696e  nient...## Makin
00002060: 6720 5365 6e73 6520 6f66 2074 6865 2078  g Sense of the x
00002070: 7864 2048 6578 2044 756d 700a 0a49 7420  xd Hex Dump..It 
00002080: 6973 2069 6d70 6f72 7461 6e74 2074 6f20  is important to 
00002090: 756e 6465 7273 7461 6e64 2074 6865 2060  understand the `
000020a0: 7878 6460 206f 7574 7075 7420 696e 206f  xxd` output in o
000020b0: 7264 6572 2074 6f20 6d69 6d69 6320 6974  rder to mimic it
000020c0: 2e20 4974 2077 696c 6c20 6265 2065 7870  . It will be exp
000020d0: 6c61 696e 6564 2062 7920 6578 616d 706c  lained by exampl
000020e0: 6520 616e 6420 636f 6e6e 6563 7465 6420  e and connected 
000020f0: 746f 2074 6865 2070 726f 7669 6465 6420  to the provided 
00002100: 7374 6172 7465 7220 6669 6c65 2e0a 0a60  starter file...`
00002110: 6060 200a 2420 6563 686f 2022 5768 6174  `` .$ echo "What
00002120: 2064 6f65 7320 7468 6973 206f 7574 7075   does this outpu
00002130: 7420 6d65 616e 3f22 207c 2078 7864 0a30  t mean?" | xxd.0
00002140: 3030 3030 3030 303a 2035 3736 3820 3631  0000000: 5768 61
00002150: 3734 2032 3036 3420 3666 3635 2037 3332  74 2064 6f65 732
00002160: 3020 3734 3638 2036 3937 3320 3230 3666  0 7468 6973 206f
00002170: 2020 5768 6174 2064 6f65 7320 7468 6973    What does this
00002180: 206f 0a30 3030 3030 3031 303a 2037 3537   o.00000010: 757
00002190: 3420 3730 3735 2037 3432 3020 3664 3635  4 7075 7420 6d65
000021a0: 2036 3136 6520 3366 3061 2020 2020 2020   616e 3f0a      
000021b0: 2020 2020 2020 7574 7075 7420 6d65 616e        utput mean
000021c0: 3f2e 0a60 6060 0a0a 5468 6520 6f75 7470  ?..```..The outp
000021d0: 7574 2069 7320 6265 7374 2075 6e64 6572  ut is best under
000021e0: 7374 6f6f 6420 6279 2062 7265 616b 696e  stood by breakin
000021f0: 6720 6974 2069 6e74 6f20 7468 7265 6520  g it into three 
00002200: 7365 6374 696f 6e73 3a20 2831 2920 6669  sections: (1) fi
00002210: 6c65 206f 6666 7365 742c 2028 3229 2068  le offset, (2) h
00002220: 6578 2064 756d 702c 2061 6e64 2028 3329  ex dump, and (3)
00002230: 2063 6861 7261 6374 6572 2072 6570 7265   character repre
00002240: 7365 6e74 6174 696f 6e2e 0a0a 6060 600a  sentation...```.
00002250: 7c20 2028 3129 2020 7c20 2020 2020 2020  |  (1)  |       
00002260: 2020 2020 2020 2020 2020 2028 3229 2020             (2)  
00002270: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002280: 207c 2020 2020 2020 2833 2920 2020 2020   |      (3)     
00002290: 2020 7c0a 3030 3030 3030 3030 3a20 3537    |.00000000: 57
000022a0: 3638 2036 3137 3420 3230 3634 2036 6636  68 6174 2064 6f6
000022b0: 3520 3733 3230 2037 3436 3820 3639 3733  5 7320 7468 6973
000022c0: 2032 3036 6620 2057 6861 7420 646f 6573   206f  What does
000022d0: 2074 6869 7320 6f0a 6060 600a 0a54 6865   this o.```..The
000022e0: 2066 696c 6520 6f66 6673 6574 2028 3129   file offset (1)
000022f0: 2069 7320 7468 6520 6e75 6d62 6572 206f   is the number o
00002300: 6620 6279 7465 7320 6672 6f6d 2074 6865  f bytes from the
00002310: 2062 6567 696e 6e69 6e67 206f 6620 7468   beginning of th
00002320: 6520 6669 6c65 2077 6865 7265 2074 6865  e file where the
00002330: 2064 6174 6120 6973 206c 6f63 6174 6564   data is located
00002340: 2e20 496e 206f 7468 6572 2077 6f72 6473  . In other words
00002350: 2c20 6974 2069 7320 7468 6520 6279 7465  , it is the byte
00002360: 2061 6464 7265 7373 2069 6e20 7468 6520   address in the 
00002370: 6669 6c65 2066 6f72 2074 6865 2064 6174  file for the dat
00002380: 6120 7468 6174 2066 6f6c 6c6f 7773 2e20  a that follows. 
00002390: 5468 6520 6164 6472 6573 7320 6974 7365  The address itse
000023a0: 6c66 2069 7320 3332 2d62 6974 7320 696e  lf is 32-bits in
000023b0: 206c 656e 6774 6820 6f72 2034 2d62 7974   length or 4-byt
000023c0: 6573 2069 6e20 746f 7461 6c2e 2054 6865  es in total. The
000023d0: 206f 6666 7365 7420 7368 6f75 6c64 2062   offset should b
000023e0: 6520 6f75 7470 7574 2061 7320 6120 342d  e output as a 4-
000023f0: 6279 7465 2068 6578 6164 6563 696d 616c  byte hexadecimal
00002400: 206e 756d 6265 722e 2054 6865 2060 7265   number. The `re
00002410: 6164 416e 6450 7269 6e74 4173 4865 7860  adAndPrintAsHex`
00002420: 2066 756e 6374 696f 6e20 696e 2074 6865   function in the
00002430: 205b 6d79 7878 642e 635d 286d 7978 7864   [myxxd.c](myxxd
00002440: 2e63 2920 7374 6172 7465 7220 636f 6465  .c) starter code
00002450: 2073 686f 7773 2068 6f77 2074 6f20 7573   shows how to us
00002460: 6520 6070 7269 6e74 6660 2074 6f20 6f75  e `printf` to ou
00002470: 7470 7574 2074 6865 2066 696c 6520 6f66  tput the file of
00002480: 6673 6574 3a20 6070 7269 6e74 6628 2225  fset: `printf("%
00002490: 3038 783a 222c 206f 6666 7365 7429 3b60  08x:", offset);`
000024a0: 2077 6865 7265 2060 3038 7860 2070 7269   where `08x` pri
000024b0: 6e74 7320 696e 2061 7320 3820 6865 7861  nts in as 8 hexa
000024c0: 6465 6369 6d61 6c20 6368 6172 6163 7465  decimal characte
000024d0: 7273 2e20 0a0a 5468 6520 6865 7820 6475  rs. ..The hex du
000024e0: 6d70 2028 3229 2069 7320 7468 6520 6163  mp (2) is the ac
000024f0: 7475 616c 2062 7974 6520 7661 6c75 6573  tual byte values
00002500: 2069 6e20 7468 6520 6669 6c65 2073 7461   in the file sta
00002510: 7274 696e 6720 6174 2074 6865 2069 6e64  rting at the ind
00002520: 6963 6174 6564 206f 6666 7365 742e 2054  icated offset. T
00002530: 6865 7265 2061 7265 2061 7420 6d6f 7374  here are at most
00002540: 2031 3620 6f66 2074 6865 7365 206f 6e20   16 of these on 
00002550: 6561 6368 206c 696e 6520 616e 6420 7468  each line and th
00002560: 6579 2061 7265 2067 726f 7570 6564 2062  ey are grouped b
00002570: 7920 7061 6972 732e 2049 6e20 7468 6520  y pairs. In the 
00002580: 6578 616d 706c 6520 6035 3760 2069 7320  example `57` is 
00002590: 7468 6520 6279 7465 2064 6973 706c 6179  the byte display
000025a0: 6564 2069 6e20 6865 7861 6465 6369 6d61  ed in hexadecima
000025b0: 6c20 6174 2061 6464 7265 7373 2060 3030  l at address `00
000025c0: 3030 3030 3030 602c 2060 3638 6020 6973  000000`, `68` is
000025d0: 2074 6865 2062 7974 6520 696e 2068 6578   the byte in hex
000025e0: 6164 6563 696d 616c 2061 7420 6164 6472  adecimal at addr
000025f0: 6573 7320 6030 3030 3030 3030 3030 3160  ess `0000000001`
00002600: 2c20 6036 3160 2069 7320 7468 6520 6279  , `61` is the by
00002610: 7465 2069 6e20 6865 7861 6465 6369 6d61  te in hexadecima
00002620: 6c20 6174 2061 6464 7265 7373 2060 3030  l at address `00
00002630: 3030 3030 3032 602c 2065 7463 2e20 5468  000002`, etc. Th
00002640: 6520 7769 6474 6820 6f66 2074 6865 2068  e width of the h
00002650: 6578 2064 756d 7020 6173 2061 6c77 6179  ex dump as alway
00002660: 7320 3136 2d62 7974 6573 2077 6974 6820  s 16-bytes with 
00002670: 7468 6520 6578 7472 6120 7370 6163 6573  the extra spaces
00002680: 2062 6574 7765 656e 2074 6865 2070 6169   between the pai
00002690: 7273 2070 6c75 7320 616e 2065 7874 7261  rs plus an extra
000026a0: 2073 7061 6365 206f 6e20 7468 6520 656e   space on the en
000026b0: 6420 746f 2073 6570 6172 6174 6520 6974  d to separate it
000026c0: 2066 726f 6d20 7365 6374 696f 6e20 2833   from section (3
000026d0: 2920 7468 6520 6368 6172 6163 7465 7220  ) the character 
000026e0: 7265 7072 6573 656e 7461 7469 6f6e 2e20  representation. 
000026f0: 2a2a 5468 6973 2066 6978 6564 2077 6964  **This fixed wid
00002700: 7468 206d 6561 6e73 2074 6861 7420 7061  th means that pa
00002710: 7274 6961 6c20 6c69 6e65 7320 6d75 7374  rtial lines must
00002720: 2062 6520 7061 6464 6564 2077 6974 6820   be padded with 
00002730: 6578 7472 6120 7370 6163 652a 2a20 6173  extra space** as
00002740: 2069 6e20 7468 6520 6578 616d 706c 652e   in the example.
00002750: 0a0a 6060 6020 0a30 3030 3030 3031 303a  ..``` .00000010:
00002760: 2037 3537 3420 3730 3735 2037 3432 3020   7574 7075 7420 
00002770: 3664 3635 2036 3136 6520 3366 3061 2020  6d65 616e 3f0a  
00002780: 2020 2020 2020 2020 2020 7574 7075 7420            utput 
00002790: 6d65 616e 3f2e 0a60 6060 0a0a 5468 6520  mean?..```..The 
000027a0: 6865 7820 6475 6d70 2073 6563 7469 6f6e  hex dump section
000027b0: 2069 6e20 7468 6520 7374 6172 7465 7220   in the starter 
000027c0: 636f 6465 2069 7320 6f75 7470 7574 2062  code is output b
000027d0: 7920 7468 6520 6675 6e63 7469 6f6e 2060  y the function `
000027e0: 766f 6964 2070 7269 6e74 4461 7461 4173  void printDataAs
000027f0: 4865 7828 756e 7369 676e 6564 2063 6861  Hex(unsigned cha
00002800: 722a 2064 6174 612c 2073 697a 655f 7420  r* data, size_t 
00002810: 7369 7a65 2960 2e20 5468 6520 6172 7261  size)`. The arra
00002820: 7920 6064 6174 6160 2063 6f6e 7461 696e  y `data` contain
00002830: 7320 6073 697a 6560 206e 756d 6265 7220  s `size` number 
00002840: 6f66 2062 7974 6573 2061 6e64 2060 7369  of bytes and `si
00002850: 7a65 6020 6973 206e 6576 6572 206d 6f72  ze` is never mor
00002860: 6520 7468 616e 2031 3620 6275 7420 6361  e than 16 but ca
00002870: 6e20 6265 206c 6573 7320 7468 616e 2031  n be less than 1
00002880: 362e 0a0a 5468 6520 6368 6172 6163 7465  6...The characte
00002890: 7220 7265 7072 6573 656e 7461 7469 6f6e  r representation
000028a0: 2028 3329 2069 7320 6578 6163 746c 7920   (3) is exactly 
000028b0: 7468 6174 2e20 5468 6520 4153 4349 4920  that. The ASCII 
000028c0: 6368 6172 6163 7465 7220 666f 7220 6561  character for ea
000028d0: 6368 2062 7974 652e 2043 6861 7261 6374  ch byte. Charact
000028e0: 6572 7320 6172 6520 656e 636f 6465 6420  ers are encoded 
000028f0: 6279 2041 5343 4949 2074 6861 7420 6173  by ASCII that as
00002900: 7369 676e 7320 6561 6368 2063 6861 7261  signs each chara
00002910: 6374 6572 2061 6e20 696e 7465 6765 7220  cter an integer 
00002920: 7661 6c75 6520 696e 2074 6865 2072 616e  value in the ran
00002930: 6765 206f 6620 6030 6020 616e 6420 6031  ge of `0` and `1
00002940: 3237 6020 696e 636c 7573 6976 6520 2873  27` inclusive (s
00002950: 6565 2060 6d61 6e20 6173 6369 6960 292e  ee `man ascii`).
00002960: 2050 7269 6e74 6162 6c65 2063 6861 7261   Printable chara
00002970: 6374 6572 7320 7374 6172 7420 6174 2074  cters start at t
00002980: 6865 2073 7061 6365 2028 2076 616c 7565  he space ( value
00002990: 2060 3332 6029 2061 6e64 2065 6e64 2061   `32`) and end a
000029a0: 7420 7468 6520 7469 6c64 6520 2864 6563  t the tilde (dec
000029b0: 696d 616c 2076 616c 7565 2060 3132 3660  imal value `126`
000029c0: 292e 2041 6e79 2063 6861 7261 6374 6572  ). Any character
000029d0: 2074 6861 7420 6973 206e 6f74 2069 6e20   that is not in 
000029e0: 7468 6520 7261 6e67 6520 6f66 2060 3332  the range of `32
000029f0: 6020 616e 6420 6031 3236 6020 696e 636c  ` and `126` incl
00002a00: 7573 6976 6520 6973 2072 6570 7265 7365  usive is represe
00002a10: 6e74 6564 2077 6974 6820 6120 7065 7269  nted with a peri
00002a20: 6f64 2028 602e 6029 2e20 0a0a 6060 600a  od (`.`). ..```.
00002a30: 3030 3030 3030 3130 3a20 3735 3734 2037  00000010: 7574 7
00002a40: 3037 3520 3734 3230 2036 6436 3520 3631  075 7420 6d65 61
00002a50: 3665 2033 6630 6120 2020 2020 2020 2020  6e 3f0a         
00002a60: 2020 2075 7470 7574 206d 6561 6e3f 2e0a     utput mean?..
00002a70: 6060 600a 0a54 6865 206c 6173 7420 6368  ```..The last ch
00002a80: 6172 6163 7465 7220 696e 2074 6865 2068  aracter in the h
00002a90: 6578 2064 756d 702c 2060 3061 602c 2069  ex dump, `0a`, i
00002aa0: 7320 7468 6520 606e 6c60 2063 6861 7261  s the `nl` chara
00002ab0: 6374 6572 2066 6f72 202a 6e65 776c 696e  cter for *newlin
00002ac0: 652a 2e20 4974 2069 7320 6f75 7473 6964  e*. It is outsid
00002ad0: 6520 7468 6520 7261 6e67 6520 7769 7468  e the range with
00002ae0: 2064 6563 696d 616c 2076 616c 7565 2060   decimal value `
00002af0: 3130 6020 616e 6420 736f 2069 7420 6170  10` and so it ap
00002b00: 7065 6172 7320 6173 2061 2060 2e60 2069  pears as a `.` i
00002b10: 6e20 7468 6520 6368 6172 6163 7465 7220  n the character 
00002b20: 7265 7072 6573 656e 7461 7469 6f6e 2e20  representation. 
00002b30: 556e 6c69 6b65 2074 6865 2068 6578 2064  Unlike the hex d
00002b40: 756d 702c 206e 6f20 7061 6464 696e 6720  ump, no padding 
00002b50: 6973 2072 6571 7569 7265 6420 746f 2066  is required to f
00002b60: 696c 6c20 7061 7274 6961 6c20 6c69 6e65  ill partial line
00002b70: 7320 696e 2074 6865 2063 6861 7261 6374  s in the charact
00002b80: 6572 2072 6570 7265 7365 6e74 6174 696f  er representatio
00002b90: 6e2e 200a 0a54 6865 2063 6861 7261 6374  n. ..The charact
00002ba0: 6572 2072 6570 7265 7365 6e74 6174 696f  er representatio
00002bb0: 6e20 7365 6374 696f 6e20 696e 2074 6865  n section in the
00002bc0: 2073 7461 7274 6572 2063 6f64 6520 6973   starter code is
00002bd0: 206f 7574 7075 7420 6279 2074 6865 2066   output by the f
00002be0: 756e 6374 696f 6e20 6076 6f69 6420 7072  unction `void pr
00002bf0: 696e 7444 6174 6141 7343 6861 7273 2875  intDataAsChars(u
00002c00: 6e73 6967 6e65 6420 6368 6172 2a20 6461  nsigned char* da
00002c10: 7461 2c20 7369 7a65 5f74 2073 697a 6529  ta, size_t size)
00002c20: 602e 2054 6865 2061 7272 6179 2060 6461  `. The array `da
00002c30: 7461 6020 636f 6e74 6169 6e73 2060 7369  ta` contains `si
00002c40: 7a65 6020 6e75 6d62 6572 206f 6620 6279  ze` number of by
00002c50: 7465 7320 616e 6420 6073 697a 6560 2069  tes and `size` i
00002c60: 7320 6e65 7665 7220 6d6f 7265 2074 6861  s never more tha
00002c70: 6e20 3136 2062 7574 2063 616e 2062 6520  n 16 but can be 
00002c80: 6c65 7373 2074 6861 6e20 3136 2e0a 0a23  less than 16...#
00002c90: 2320 4d61 6b69 6e67 2053 656e 7365 206f  # Making Sense o
00002ca0: 6620 7468 6520 7878 6420 4269 7473 2044  f the xxd Bits D
00002cb0: 756d 700a 0a54 6865 2062 6974 7320 6475  ump..The bits du
00002cc0: 6d70 2028 602d 6260 206f 7220 602d 6269  mp (`-b` or `-bi
00002cd0: 7473 6029 2069 7320 7369 6d69 6c61 7220  ts`) is similar 
00002ce0: 746f 2074 6865 2068 6578 2064 756d 7020  to the hex dump 
00002cf0: 6f6e 6c79 2074 6865 2062 7974 6573 2061  only the bytes a
00002d00: 7265 206f 7574 7075 7420 696e 2074 6865  re output in the
00002d10: 2062 696e 6172 7920 7265 7072 6573 656e   binary represen
00002d20: 7461 7469 6f6e 206f 6620 7468 6569 7220  tation of their 
00002d30: 4153 4349 4920 7661 6c75 652c 2073 6563  ASCII value, sec
00002d40: 7469 6f6e 2028 3229 206f 6e6c 7920 6f75  tion (2) only ou
00002d50: 7470 7574 7320 7369 7820 6279 7465 7320  tputs six bytes 
00002d60: 7261 7468 6572 2074 6861 6e20 3136 2c20  rather than 16, 
00002d70: 616e 6420 6279 7465 7320 6172 6520 6e6f  and bytes are no
00002d80: 7420 7061 6972 6564 2e0a 0a60 6060 0a24  t paired...```.$
00002d90: 2065 6368 6f20 2257 6861 7420 646f 6573   echo "What does
00002da0: 2074 6869 7320 6f75 7470 7574 206d 6561   this output mea
00002db0: 6e3f 2220 7c20 7878 6420 2d62 6974 730a  n?" | xxd -bits.
00002dc0: 3030 3030 3030 3030 3a20 3031 3031 3031  00000000: 010101
00002dd0: 3131 2030 3131 3031 3030 3020 3031 3130  11 01101000 0110
00002de0: 3030 3031 2030 3131 3130 3130 3020 3030  0001 01110100 00
00002df0: 3130 3030 3030 2030 3131 3030 3130 3020  100000 01100100 
00002e00: 2057 6861 7420 640a 3030 3030 3030 3036   What d.00000006
00002e10: 3a20 3031 3130 3131 3131 2030 3131 3030  : 01101111 01100
00002e20: 3130 3120 3031 3131 3030 3131 2030 3031  101 01110011 001
00002e30: 3030 3030 3020 3031 3131 3031 3030 2030  00000 01110100 0
00002e40: 3131 3031 3030 3020 206f 6573 2074 680a  1101000  oes th.
00002e50: 3030 3030 3030 3063 3a20 3031 3130 3130  0000000c: 011010
00002e60: 3031 2030 3131 3130 3031 3120 3030 3130  01 01110011 0010
00002e70: 3030 3030 2030 3131 3031 3131 3120 3031  0000 01101111 01
00002e80: 3131 3031 3031 2030 3131 3130 3130 3020  110101 01110100 
00002e90: 2069 7320 6f75 740a 3030 3030 3030 3132   is out.00000012
00002ea0: 3a20 3031 3131 3030 3030 2030 3131 3130  : 01110000 01110
00002eb0: 3130 3120 3031 3131 3031 3030 2030 3031  101 01110100 001
00002ec0: 3030 3030 3020 3031 3130 3131 3031 2030  00000 01101101 0
00002ed0: 3131 3030 3130 3120 2070 7574 206d 650a  1100101  put me.
00002ee0: 3030 3030 3030 3138 3a20 3031 3130 3030  00000018: 011000
00002ef0: 3031 2030 3131 3031 3131 3020 3030 3131  01 01101110 0011
00002f00: 3131 3131 2030 3030 3031 3031 3020 2020  1111 00001010   
00002f10: 2020 2020 2020 2020 2020 2020 2020 2020                  
00002f20: 2061 6e3f 2e0a 6060 600a 0a41 7320 6265   an?..```..As be
00002f30: 666f 7265 2c20 7061 6464 696e 6720 6973  fore, padding is
00002f40: 2061 6464 6564 2074 6f20 6669 6c6c 2070   added to fill p
00002f50: 6172 7469 616c 6c79 2063 6f6d 706c 6574  artially complet
00002f60: 6520 6c69 6e65 732e 2046 756e 6374 696f  e lines. Functio
00002f70: 6e61 6c69 7479 2066 6f72 2074 6869 7320  nality for this 
00002f80: 7365 6374 696f 6e20 6973 2074 6f20 6265  section is to be
00002f90: 2069 6d70 6c65 6d65 6e74 6564 2069 6e20   implemented in 
00002fa0: 7468 6520 6076 6f69 6420 7265 6164 416e  the `void readAn
00002fb0: 6450 7269 6e74 496e 7075 7441 7342 6974  dPrintInputAsBit
00002fc0: 7328 4649 4c45 2a20 696e 7075 7429 6020  s(FILE* input)` 
00002fd0: 6675 6e63 7469 6f6e 2066 6f6c 6c6f 7769  function followi
00002fe0: 6e67 2074 6865 2070 6174 7465 726e 2069  ng the pattern i
00002ff0: 6e20 6974 7320 6865 7820 6475 6d70 2063  n its hex dump c
00003000: 6f75 6e74 6572 7061 7274 2e0a 0a23 2320  ounterpart...## 
00003010: 5072 696e 7469 6e67 2042 6974 730a 0a49  Printing Bits..I
00003020: 6d70 6c65 6d65 6e74 2074 6865 2061 6c67  mplement the alg
00003030: 6f72 6974 686d 2063 6f76 6572 6564 2069  orithm covered i
00003040: 6e20 636c 6173 7320 746f 2063 6f6e 7665  n class to conve
00003050: 7274 2061 6e20 6075 6e73 6967 6e65 6420  rt an `unsigned 
00003060: 6368 6172 6020 746f 2061 2073 7472 696e  char` to a strin
00003070: 6720 696e 2062 6974 732e 2054 6865 2070  g in bits. The p
00003080: 7365 7564 6f2d 636f 6465 2069 7320 6265  seudo-code is be
00003090: 6c6f 7720 616e 6420 7461 6b65 7320 6173  low and takes as
000030a0: 2069 6e70 7574 2061 6e20 6075 6e73 6967   input an `unsig
000030b0: 6e65 6420 6368 6172 6020 7769 7468 206e  ned char` with n
000030c0: 616d 6520 6078 602e 0a0a 6060 6063 0a2f  ame `x`...```c./
000030d0: 2a20 7265 7065 6174 2038 2074 696d 6573  * repeat 8 times
000030e0: 202a 2f0a 6966 2028 7820 2520 3220 3d3d   */.if (x % 2 ==
000030f0: 2031 2920 7b0a 2020 2f2a 2073 746f 7265   1) {.  /* store
00003100: 2061 2031 2066 6f72 2074 6865 2062 6974   a 1 for the bit
00003110: 202a 2f0a 7d20 656c 7365 207b 0a20 202f   */.} else {.  /
00003120: 2a20 7374 6f72 6520 6120 3020 666f 7220  * store a 0 for 
00003130: 7468 6520 6269 7420 2a2f 0a7d 0a78 203d  the bit */.}.x =
00003140: 2078 202f 2032 3b0a 6060 600a 0a54 6865   x / 2;.```..The
00003150: 2061 6c67 6f72 6974 686d 2067 656e 6572   algorithm gener
00003160: 6174 6573 2074 6865 206c 6561 7374 2073  ates the least s
00003170: 6967 6e69 6669 6361 6e74 2062 6974 2066  ignificant bit f
00003180: 6972 7374 2061 6e64 2074 6865 206d 6f73  irst and the mos
00003190: 7420 7369 676e 6966 6963 616e 7420 6269  t significant bi
000031a0: 7420 6c61 7374 2e20 5375 7070 6f73 6520  t last. Suppose 
000031b0: 7468 6174 2060 7820 3d20 3133 602e 0a0a  that `x = 13`...
000031c0: 6060 600a 4974 6572 6174 696f 6e20 303a  ```.Iteration 0:
000031d0: 2078 203d 2031 3320 2d2d 3e20 310a 4974   x = 13 --> 1.It
000031e0: 6572 6174 696f 6e20 313a 2078 203d 2036  eration 1: x = 6
000031f0: 2020 2d2d 3e20 300a 4974 6572 6174 696f    --> 0.Iteratio
00003200: 6e20 323a 2078 203d 2033 2020 2d2d 3e20  n 2: x = 3  --> 
00003210: 310a 4974 6572 6174 696f 6e20 333a 2078  1.Iteration 3: x
00003220: 203d 2031 2020 2d2d 3e20 310a 4974 6572   = 1  --> 1.Iter
00003230: 6174 696f 6e20 343a 2078 203d 2030 2020  ation 4: x = 0  
00003240: 2d2d 3e20 300a 4974 6572 6174 696f 6e20  --> 0.Iteration 
00003250: 353a 2078 203d 2030 2020 2d2d 3e20 300a  5: x = 0  --> 0.
00003260: 4974 6572 6174 696f 6e20 363a 2078 203d  Iteration 6: x =
00003270: 2030 2020 2d2d 3e20 300a 4974 6572 6174   0  --> 0.Iterat
00003280: 696f 6e20 373a 2078 203d 2030 2020 2d2d  ion 7: x = 0  --
00003290: 3e20 300a 6060 600a 0a54 6865 206f 7574  > 0.```..The out
000032a0: 7075 7420 7374 7269 6e67 2073 686f 756c  put string shoul
000032b0: 6420 6265 2060 3030 3030 3131 3031 602e  d be `00001101`.
000032c0: 2049 7465 7261 7469 6f6e 2060 3060 2067   Iteration `0` g
000032d0: 656e 6572 6174 6564 2074 6865 206c 6561  enerated the lea
000032e0: 7374 2073 6967 6e69 6669 6361 6e74 2062  st significant b
000032f0: 6974 2060 3160 2c20 616e 6420 6974 6572  it `1`, and iter
00003300: 6174 696f 6e20 6037 6020 6765 6e65 7261  ation `7` genera
00003310: 7465 6420 7468 6520 6d6f 7374 2073 6967  ted the most sig
00003320: 6e69 6669 6361 6e74 2062 6974 2060 3060  nificant bit `0`
00003330: 2e0a 0a23 2320 4368 6563 6b69 6e67 204f  ...## Checking O
00003340: 7574 7075 740a 0a54 6865 7265 2061 7265  utput..There are
00003350: 2074 776f 2077 6179 7320 746f 2063 6865   two ways to che
00003360: 636b 2074 6865 206f 7574 7075 743a 2076  ck the output: v
00003370: 6973 7561 6c6c 7920 616e 6420 7072 6f67  isually and prog
00003380: 7261 6d61 7469 6361 6c6c 792e 2056 6973  ramatically. Vis
00003390: 7561 6c6c 7920 636f 6d70 6172 696e 6720  ually comparing 
000033a0: 6f75 7470 7574 2069 7320 6669 6e65 2066  output is fine f
000033b0: 6f72 2073 6d61 6c6c 2069 6e70 7574 7320  or small inputs 
000033c0: 6275 7420 6272 6561 6b64 6f77 6e73 2066  but breakdowns f
000033d0: 6f72 2062 6967 2028 6d6f 7265 2063 6f6d  or big (more com
000033e0: 706c 6578 2920 696e 7075 7473 2e20 5468  plex) inputs. Th
000033f0: 6520 6064 6966 6660 2069 7320 6120 7072  e `diff` is a pr
00003400: 6f67 7261 6d6d 6174 6963 2073 6f6c 7574  ogrammatic solut
00003410: 696f 6e20 696e 2074 6861 7420 6974 2063  ion in that it c
00003420: 6f6d 7061 7265 7320 7477 6f20 6669 6c65  ompares two file
00003430: 7320 6c69 6e65 2062 7920 6c69 6e65 2061  s line by line a
00003440: 6e64 2072 6570 6f72 7473 2061 6e79 2064  nd reports any d
00003450: 6966 6665 7265 6e63 6573 2028 7365 6520  ifferences (see 
00003460: 606d 616e 2064 6966 6660 292e 2055 7369  `man diff`). Usi
00003470: 6e67 2060 6469 6666 6020 7468 6f75 6768  ng `diff` though
00003480: 2072 6571 7569 7265 7320 7477 6f20 6669   requires two fi
00003490: 6c65 7320 6669 6c65 7320 746f 2063 6f6d  les files to com
000034a0: 7061 7265 2e20 0a0a 2a4f 7574 7075 7420  pare. ..*Output 
000034b0: 7374 7265 616d 2072 6564 6972 6563 7469  stream redirecti
000034c0: 6f6e 2a20 6361 7074 7572 6573 2060 7374  on* captures `st
000034d0: 646f 7574 6020 616e 6420 7265 6469 7265  dout` and redire
000034e0: 6374 7320 6974 2074 6f20 6120 6669 6c65  cts it to a file
000034f0: 2e20 5468 6520 7265 6469 7265 6374 2069  . The redirect i
00003500: 7320 7769 7468 2074 6865 2027 3e27 2073  s with the '>' s
00003510: 796d 626f 6c2e 2048 6572 6520 6973 2061  ymbol. Here is a
00003520: 6e20 6578 616d 706c 6520 6f66 2068 6f77  n example of how
00003530: 2069 7420 6361 6e20 6265 2075 7365 6420   it can be used 
00003540: 7769 7468 2060 6469 6666 6020 746f 2063  with `diff` to c
00003550: 6f6d 7061 7265 2074 776f 2066 696c 6573  ompare two files
00003560: 2e0a 0a60 6060 0a24 2063 6174 206d 7978  ...```.$ cat myx
00003570: 7864 2e63 207c 2078 7864 203e 2078 7864  xd.c | xxd > xxd
00003580: 2e74 7874 0a24 2063 6174 206d 7978 7864  .txt.$ cat myxxd
00003590: 2e63 207c 202e 2f6d 7978 7864 203e 206d  .c | ./myxxd > m
000035a0: 7978 7864 2e74 7874 0a24 2064 6966 6620  yxxd.txt.$ diff 
000035b0: 6d79 7878 642e 7478 7420 7878 642e 7478  myxxd.txt xxd.tx
000035c0: 7420 0a60 6060 0a0a 5468 6973 2073 616d  t .```..This sam
000035d0: 6520 6578 616d 706c 6520 6361 6e20 6265  e example can be
000035e0: 2061 6363 6f6d 706c 6973 6865 6420 7769   accomplished wi
000035f0: 7468 2069 6e70 7574 2073 7472 6561 6d20  th input stream 
00003600: 7265 6469 7265 6374 2061 7320 6265 6c6f  redirect as belo
00003610: 772e 0a0a 6060 600a 2420 7878 6420 3c20  w...```.$ xxd < 
00003620: 6d79 7878 642e 6320 3e20 7878 642e 7478  myxxd.c > xxd.tx
00003630: 740a 2420 2e2f 6d79 7878 6420 3c20 6d79  t.$ ./myxxd < my
00003640: 7878 642e 6320 3e20 6d79 7878 642e 7478  xxd.c > myxxd.tx
00003650: 740a 2420 6469 6666 206d 7978 7864 2e74  t.$ diff myxxd.t
00003660: 7874 2078 7864 2e74 7874 200a 6060 600a  xt xxd.txt .```.
00003670: 0a41 7320 7468 6572 6520 6973 206e 6f20  .As there is no 
00003680: 6f75 7470 7574 2066 726f 6d20 7468 6520  output from the 
00003690: 6064 6966 6660 2063 6f6d 6d61 6e64 2c20  `diff` command, 
000036a0: 7468 6520 7477 6f20 6669 6c65 2065 7861  the two file exa
000036b0: 6374 6c79 206d 6174 6368 2e20 4865 7265  ctly match. Here
000036c0: 2069 6e20 616e 2065 7861 6d70 6c65 2077   in an example w
000036d0: 6865 7265 2074 6865 2074 6865 7265 2069  here the there i
000036e0: 7320 6120 6d69 736d 6174 6368 2e0a 0a60  s a mismatch...`
000036f0: 6060 0a24 2064 6966 6620 6d79 7878 642e  ``.$ diff myxxd.
00003700: 7478 7420 7878 642e 7478 740a 3232 6332  txt xxd.txt.22c2
00003710: 320a 3c20 3030 3030 3031 3530 3a20 3638  2.< 00000150: 68
00003720: 3635 2032 3036 3920 3665 3734 2036 3536  65 2069 6e74 656
00003730: 3720 3635 3732 2032 3037 3620 3631 3663  7 6572 2076 616c
00003740: 2037 3536 3520 2068 6520 696e 7465 6765   7565  he intege
00003750: 7220 7661 6c75 652e 610a 2d2d 2d0a 3e20  r value.a.---.> 
00003760: 3030 3030 3031 3530 3a20 3638 3635 2032  00000150: 6865 2
00003770: 3036 3920 3665 3734 2036 3536 3720 3635  069 6e74 6567 65
00003780: 3732 2032 3037 3620 3631 3663 2037 3536  72 2076 616c 756
00003790: 3520 2068 6520 696e 7465 6765 7220 7661  5  he integer va
000037a0: 6c75 650a 3332 6333 320a 3c20 3030 3030  lue.32c32.< 0000
000037b0: 3031 6630 3a20 3732 3733 2036 3534 3320  01f0: 7273 6543 
000037c0: 3666 3664 2036 6436 3120 3665 3634 2034  6f6d 6d61 6e64 4
000037d0: 6336 3920 3665 3635 2032 3836 3920 2072  c69 6e65 2869  r
000037e0: 7365 436f 6d6d 616e 644c 696e 6528 6978  seCommandLine(ix
000037f0: 0a2d 2d2d 0a3e 2030 3030 3030 3166 303a  .---.> 000001f0:
00003800: 2037 3237 3320 3635 3433 2036 6636 6420   7273 6543 6f6d 
00003810: 3664 3631 2036 6536 3420 3463 3639 2036  6d61 6e64 4c69 6
00003820: 6536 3520 3238 3639 2020 7273 6543 6f6d  e65 2869  rseCom
00003830: 6d61 6e64 4c69 6e65 2869 0a60 6060 0a0a  mandLine(i.```..
00003840: 2323 2057 6861 7420 746f 2064 6f20 7769  ## What to do wi
00003850: 7468 2061 6e20 696e 6669 6e69 7465 206c  th an infinite l
00003860: 6f6f 703f 0a0a 4d79 2066 6176 6f72 6974  oop?..My favorit
00003870: 6520 696e 6669 6e69 7465 206c 6f6f 7020  e infinite loop 
00003880: 6973 2074 6865 206f 6e65 2062 656c 6f77  is the one below
00003890: 2e0a 0a60 6060 630a 6920 3d20 303b 0a77  ...```c.i = 0;.w
000038a0: 6869 6c65 2028 6920 3c20 3130 297b 0a20  hile (i < 10){. 
000038b0: 2020 2070 7269 6e74 6628 2225 695c 6e22     printf("%i\n"
000038c0: 2c20 6929 3b0a 7d0a 6060 600a 0a48 6572  , i);.}.```..Her
000038d0: 6520 4920 666f 7267 6f74 2074 6f20 696e  e I forgot to in
000038e0: 6372 656d 656e 7420 6069 6020 696e 2074  crement `i` in t
000038f0: 6865 206c 6f6f 7020 626f 6479 2c20 736f  he loop body, so
00003900: 2066 6f72 2073 7572 6520 7468 6973 2070   for sure this p
00003910: 726f 6772 616d 2077 696c 6c20 6e6f 7420  rogram will not 
00003920: 7465 726d 696e 6174 652e 0a0a 5468 6520  terminate...The 
00003930: 636f 6d6d 616e 6420 6c69 6e65 2070 726f  command line pro
00003940: 7669 6465 7320 6120 7665 7279 2065 6173  vides a very eas
00003950: 7920 736f 6c75 7469 6f6e 2074 6f20 6120  y solution to a 
00003960: 6e6f 6e2d 7465 726d 696e 6174 696e 6720  non-terminating 
00003970: 7072 6f67 7261 6d3a 2060 4354 524c 2d63  program: `CTRL-c
00003980: 6020 2860 5e63 6029 2e20 4c69 6b65 2060  ` (`^c`). Like `
00003990: 4354 524c 2d64 602c 2068 6f6c 6420 646f  CTRL-d`, hold do
000039a0: 776e 2074 6865 2063 6f6e 7472 6f6c 206b  wn the control k
000039b0: 6579 2061 6e64 2074 6869 7320 7469 6d65  ey and this time
000039c0: 2074 7970 6520 6063 6020 7768 696c 6520   type `c` while 
000039d0: 686f 6c64 696e 6720 7468 6520 6b65 792e  holding the key.
000039e0: 2041 6674 6572 2061 2062 7269 6566 2070   After a brief p
000039f0: 6175 7365 2074 6865 2070 726f 6772 616d  ause the program
00003a00: 2077 696c 6c20 6578 6974 2061 6e64 2067   will exit and g
00003a10: 6976 6520 6261 636b 2074 6865 2063 6f6d  ive back the com
00003a20: 6d61 6e64 206c 696e 6520 7072 6f6d 7074  mand line prompt
00003a30: 2e20 2a2a 4e65 7665 7220 6b69 6c6c 2074  . **Never kill t
00003a40: 6865 2073 6865 6c6c 2074 6f20 6669 7820  he shell to fix 
00003a50: 616e 2069 6e66 696e 6974 6520 6c6f 6f70  an infinite loop
00003a60: 2e2a 2a20 4b69 6c6c 696e 6720 7468 6520  .** Killing the 
00003a70: 7368 656c 6c20 6c65 6176 6573 2074 6865  shell leaves the
00003a80: 2070 726f 6772 616d 2072 756e 6e69 6e67   program running
00003a90: 2061 6e64 2077 696c 6c20 7365 7269 6f75   and will seriou
00003aa0: 736c 7920 626f 6720 646f 776e 2074 6865  sly bog down the
00003ab0: 206d 6163 6869 6e65 2e0a 0a23 2320 4920   machine...## I 
00003ac0: 6e65 6564 2061 2064 6562 7567 6765 7221  need a debugger!
00003ad0: 0a0a 5468 6520 6465 6275 6767 6572 2069  ..The debugger i
00003ae0: 7320 6067 6462 6020 616e 6420 6974 2069  s `gdb` and it i
00003af0: 7320 6176 6169 6c61 626c 6520 6672 6f6d  s available from
00003b00: 2074 6865 2063 6f6d 6d61 6e64 206c 696e   the command lin
00003b10: 6520 6966 206e 6565 6465 642e 2054 6869  e if needed. Thi
00003b20: 7320 5b70 7269 6d65 725d 282e 2e2f 6764  s [primer](../gd
00003b30: 622d 7072 696d 6572 2e6d 6429 2069 7320  b-primer.md) is 
00003b40: 6120 676f 6f64 2073 7461 7274 696e 6720  a good starting 
00003b50: 706f 696e 742e 2054 6865 7265 2061 7265  point. There are
00003b60: 206d 616e 7920 676f 6f64 206f 6e6c 696e   many good onlin
00003b70: 6520 7265 736f 7572 6365 7320 6173 2077  e resources as w
00003b80: 656c 6c2e                                ell.
